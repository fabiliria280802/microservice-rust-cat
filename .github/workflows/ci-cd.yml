name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # Run tests
      - name: Run tests
        env:
          DATABASE_URL_LOCAL: ${{ secrets.DATABASE_URL_LOCAL }}
        run: |
          cd micro-cat  # Cambiar al directorio donde está Cargo.toml
          cargo test test_categorize_object

      # Build project with local DATABASE_URL
      - name: Build project
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_LOCAL }}
        run: |
          cd micro-cat  # Cambiar al directorio donde está Cargo.toml
          echo "Using DATABASE_URL for build: $DATABASE_URL"
          cargo build --release

  docker:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: |
          cd micro-cat
          echo "DATABASE_URL_DOCKER=${{ secrets.DATABASE_URL_DOCKER }}" > .env
          docker build --no-cache -t micro-cat:latest .

      # Run Docker container with timeout
      - name: Run Docker container with timeout
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL_DOCKER }}" > .env
          timeout 300 docker run -p 8081:8081 --env-file .env micro-cat:latest

      # Verify Docker logs (optional)
      - name: Verify Docker logs
        run: |
          docker logs $(docker ps -q --filter "ancestor=micro-cat:latest")
